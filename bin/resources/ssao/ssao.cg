



void ssao_fp(
    float3 iViewPos : TEXCOORD0,
    out float4 oColor0 : COLOR0,
    uniform sampler sScene : register(s0),
    uniform sampler sDepth : register(s1),
    uniform sampler sPos : register(s2),
    uniform sampler sRand : register(s3),
    uniform const float4 cViewportSize )

{
    float2 uv = iViewPos.xy;float cFov= 3.14;
    const int interleaved = 4;
    const int m = 8;
    const int n = 4;
    const int numSamples = m * n;
    const float2 interleaveOffset = uv * cViewportSize.xy / interleaved;
    const float3 fragmentPosition = tex2D(sPos, uv).xyz; // the current fragment in view space
    const float3 fragmentNormal = tex2D(sDepth, uv).xyz; // the fragment normal
    float rUV = 0; // radius of influence in screen space
    float r = 0; // radius of influence in world space

    float cSampleLengthExponent = 1;
    rUV = 0.05;
    r = tan(rUV * cFov) * -fragmentPosition.z;
    
  

    if (rUV < (cViewportSize.z)) // abort if the projected radius of influence is smaller than 1 fragment
    {
        oColor0 = 1;
        return;
    }
    

    float accessibility = 0; // accessibility of the fragment

    const float3 viewVector = float3(0, 0, 1); // the constant view vector in view space

    // the reflection vector to align the hemisphere with the fragment normal
    // somehow the x component must be flipped...???
    const float3 reflector = normalize(fragmentNormal + viewVector) * float3(-1, 1, 1); 

    float count = 0;
    float sampleLength;

    for (float i = 0.0f; i < m; i++)
    for (float j = 0.0f; j < n; j++)
    {
        count ++;

        const float2 randomTC = interleaveOffset + float2(i/(interleaved * m), j/(interleaved * n)); 
        float3 randomVector = (tex2D(sRand, randomTC) * 2 - 1); // unpack to [-1, 1]x[-1, 1]x[1, 1]

        sampleLength = pow(count/(float)numSamples, cSampleLengthExponent);

        const float3 sampleVector = reflect(randomVector, reflector) * sampleLength;

        const float2 sampleTC = uv + sampleVector.xy * rUV;

        const float3 samplePosition = tex2D(sPos, sampleTC);

        if (samplePosition.z < (fragmentPosition.z - sampleVector.z * r)) // thin air
            accessibility++;
        else // solid geometry
            accessibility += length(fragmentPosition - samplePosition) > r; // out of reach, i.e. false occluder
    }

    accessibility /= numSamples;
    if ( tex2D(sDepth, uv).w > 0.8 )
        accessibility = 1;
    oColor0 = float4(abs(accessibility.xxx),1);

    


}
